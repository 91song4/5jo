<body>
  <section class="calendar-wrap">
    <div class="sec_cal">
      <div class="cal_nav">
        <a href="javascript:;" class="nav-btn go-prev">prev</a>
        <div class="year-month"></div>
        <a href="javascript:;" class="nav-btn go-next">next</a>
        <a href="javascript:;" class="today-btn go-today">Today</a>
      </div>
      <div class="cal_wrap">
        <div class="days">
          <div class="day">SUN</div>
          <div class="day">MON</div>
          <div class="day">TUE</div>
          <div class="day">WED</div>
          <div class="day">THU</div>
          <div class="day">FRI</div>
          <div class="day">SAT</div>
        </div>
        <div class="dates"></div>
      </div>
    </div>
  </section>
</body>
<script>
  $(document).ready(function () {
    calendarInit();
  });
  /*
    달력 렌더링 할 때 필요한 정보 목록

    현재 월(초기값 : 현재 시간)
    금월 마지막일 날짜와 요일
    전월 마지막일 날짜와 요일
  */

  function calendarInit() {
    // 혹시 모를 버그대비 미리 컨테이너 지워주기
    document.querySelector('.dates').innerHTML = '';

    // 날짜 정보 가져오기
    let date = new Date(); // 현재 날짜(로컬 기준) 가져오기
    let utc = date.getTime() + date.getTimezoneOffset() * 60 * 1000; // uct 표준시 도출
    let kstGap = 9 * 60 * 60 * 1000; // 한국 kst 기준시간 더하기
    let today = new Date(utc + kstGap); // 한국 시간으로 date 객체 만들기(오늘)

    let thisMonth = new Date(
      today.getFullYear(),
      today.getMonth(),
      today.getDate(),
    );
    // 달력에서 표기하는 날짜 객체

    let currentYear = thisMonth.getFullYear(); // 달력에서 표기하는 연
    let currentMonth = thisMonth.getMonth(); // 달력에서 표기하는 월
    let currentDate = thisMonth.getDate(); // 달력에서 표기하는 일

    // 캘린더 렌더링
    renderCalender(thisMonth);

    function renderCalender(thisMonth) {
      // 렌더링을 위한 데이터 정리
      currentYear = thisMonth.getFullYear();
      currentMonth = thisMonth.getMonth();
      currentDate = thisMonth.getDate();

      // 이전 달의 마지막 날 날짜와 요일 구하기
      let startDay = new Date(currentYear, currentMonth, 0);
      let prevDate = startDay.getDate();
      let prevDay = startDay.getDay();

      // 이번 달의 마지막날 날짜와 요일 구하기
      let endDay = new Date(currentYear, currentMonth + 1, 0);
      let nextDate = endDay.getDate();
      // let nextDay = endDay.getDay();

      // 현재 월 표기
      $('.year-month').text(currentYear + '.' + (currentMonth + 1));

      // 렌더링 html 요소 생성
      calendar = document.querySelector('.dates');
      calendar.innerHTML = '';

      let prevCount = 0;
      // 지난달
      for (let i = prevDate - prevDay; i <= prevDate; i++) {
        calendar.innerHTML =
          calendar.innerHTML + '<div class="day prev disable">' + i + '</div>';
        prevCount++;
        // 만약 7번 반복되었다면 (해당 달의 1일이 일요일인 경우) 생성된 지난달의 날짜를 삭제
        if (prevCount === 7) {
          calendar.innerHTML = '';
        }
      }

      for (let i = 1; i <= nextDate; i++) {
        let dateElement = document.createElement('div');
        dateElement.className = 'day current';
        dateElement.textContent = i;
        dateElement.addEventListener('click', handleDateClick);
        calendar.appendChild(dateElement);
      }

      // 오늘 날짜 표기
      if (today.getMonth() == currentMonth) {
        todayDate = today.getDate();
        let currentMonthDate = document.querySelectorAll('.dates .current');
        currentMonthDate[todayDate - 1].classList.add('today');
        //
        if (
          currentYear == today.getFullYear() &&
          currentMonth == today.getMonth() &&
          currentDate == todayDate
        ) {
          currentMonthDate[todayDate - 1].style.backgroundColor =
            'rgb(255, 183, 128)';
        }
      }
    }

    // 이전달로 이동
    $('.go-prev').on('click', function () {
      thisMonth = new Date(currentYear, currentMonth - 1, 1);
      renderCalender(thisMonth);
    });

    // 다음달로 이동
    $('.go-next').on('click', function () {
      thisMonth = new Date(currentYear, currentMonth + 1, 1);
      renderCalender(thisMonth);
    });

    // 오늘 날짜로 돌아가기
    $('.go-today').on('click', function () {
      thisMonth = new Date(
        today.getFullYear(),
        today.getMonth(),
        today.getDate(),
      );
      renderCalender(thisMonth);
      console.log(today);
    });

    let isAPICalled = false;
    // 클릭한 날짜를 서버에 넘겨주기
    function handleDateClick(event) {
      let clickedDate =
        currentYear + '-' + (currentMonth + 1) + '-' + event.target.textContent;

      if (!isAPICalled) {
        isAPICalled = true;
        axios
          .get('/api/' + clickedDate)
          .then((response) => {
            isAPICalled = false;
            localStorage.setItem(
              'usedCamps',
              JSON.stringify(response.data.availableCamps),
            );
            window.location.href = '/view/reserve/' + clickedDate;
          })
          .catch((error) => {
            // 지정해둔 에러를 얼럿으로 배출함
            alert(error.response.data.message);
            console.log();
            isAPICalled = false;
          });
      }
    }
  }
</script>
