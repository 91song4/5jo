<body class="sub_page">
  <!-- about section -->
  <section class="about_section layout_padding">
    <div class="about_container">
      <div class="d-flex justify-content-center">
        <h2 class="custom_heading">결제</h2>
      </div>
      <table class="table">
        <thead>
          <tr>
            <th scope="col">캠프명</th>
            <th scope="col">이용 날짜</th>
            <th scope="col">이용 인원</th>
            <th scope="col">총 금액</th>
            <th scope="col">쿠폰명</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td id="campName"></td>
            <td id="selectedDay"></td>
            <td id="totalPeople"></td>
            <td id="price"></td>
            <td id="coupon"></td>
          </tr>
        </tbody>
      </table>
      <div class="coupon-container">
        <div class="discount-percentage-wrap">
          할인 적용 %
          <div id="discountPercentage" class="discount-percentage"></div>
        </div>
        <div class="max-discount-wrap">
          최대할인금액
          <div id="maxDiscount" class="max-discount"></div>
        </div>
      </div>
      <div>
        <div class="price-wrap">
          <div>총 결제 금액 :</div>
          <div id="total-price" class="total-price"></div>
        </div>
      </div>
      <hr class="hr-solid" />
      <div class="div-wrap">
        <div class="user-info">
          <div class="info-wrap">
            <div class="info-title">예약자명 :</div>
            <div id="name" class="info-content"><%=userInfo.name%></div>
          </div>
          <div class="info-wrap">
            <div class="info-title">생년월일 :</div>
            <div id="birthday" class="info-content"><%=userInfo.birthday%></div>
          </div>
          <div class="info-wrap">
            <div class="info-title">연락처 :</div>
            <div id="phone" class="info-content"><%=userInfo.phone%></div>
          </div>
          <div class="info-wrap">
            <div class="info-title">비상연락처 :</div>
            <div class="">
              <textarea
                id="emergencyContact"
                class="emergency-contact"
                maxlength="20"
                rows="1"
              ></textarea>
            </div>
          </div>
          <div class="info-wrap">
            <div class="info-title">이메일 :</div>
            <div id="email" class="info-content"><%=userInfo.email%></div>
          </div>
          <div class="info-wrap">
            <div class="info-title">요청사항 :</div>
            <div class="info-content">
              <textarea
                id="requirements"
                class="requirements"
                maxlength="60"
                rows="1"
              ></textarea>
            </div>
          </div>
        </div>
        <div class="updown"></div>
        <div class="payment-wrap">
          <!-- Dropdown -->
          <div class="coupon-dropdown">
            <select id="coupon-dropdown">
              <option value="">사용 가능한 쿠폰 없음</option>
            </select>
            <button id="apply-coupon-btn" class="apply-coupon-btn">
              쿠폰 적용하기
            </button>
          </div>
          <div class="rules-wrap">
            <button id="card-payment" class="payment-rules">카드 결제</button>
            <button id="deposit" class="payment-rules">무통장 입금</button>
          </div>
          <div>
            <button id="pay" class="payment">결제</button>
          </div>
        </div>
      </div>
    </div>
  </section>
  <!-- Modal -->
  <div id="myModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <h2>이름을 입력해주세요</h2>
      <input type="text" id="name-input" class="name-input" />
      <button id="complete-btn" class="complete-btn">확인</button>
    </div>
  </div>
  <input type="hidden" id="hidden" />
</body>

<script>
  document.addEventListener('DOMContentLoaded', async function () {
    // 로컬 스토리지 긁어오고
    debugger;
    const { campName, selectedDay, totalPeople, totalPrice } = JSON.parse(
      localStorage.getItem('paymentInfo'),
    );
    let data = {};

    // 유저가 선택한 주문 정보를 뿌려줌
    getPaymentInfo();

    // id정보는 미리 변수에 넣어주고
    const userId = '<%=userInfo.id%>';

    // 부족한 정보 API로 받아오고
    const response = await axios.get('/api/camps');
    const camp = response.data.find((camp) => camp.name === campName);
    const campId = camp ? camp.id : null;
    console.log('camp ID : ', campId);

    const cardPaymentBtn = document.getElementById('card-payment');
    const depositBtn = document.getElementById('deposit');
    const payBtn = document.getElementById('pay');

    let paymentMethod;

    // 보유중인 쿠폰 가져오기 - userId를 받아와서 사용해야 하기 때문에 정의된 변수보다 아래에서 호출함
    getCouponInfoByUserId();

    // 쿠폰 버튼 정의
    async function getCouponInfoByUserId() {
      try {
        const userCouponsResponse = await axios.get(
          `/api/coupon/mycoupon/${userId}`,
        );
        console.log(
          '유저가 소유한 쿠폰 제대로 들고오는지',
          userCouponsResponse.data,
        );
        const userCoupons = userCouponsResponse.data.couponInfo;
        console.log('보유중인 쿠폰 상세정보', userCoupons);

        // 사용이 가능한 쿠폰만 걸러냄
        const availableCoupons = userCoupons.filter((coupon) => !coupon.isUsed);
        console.log('가져온 데이터를 검증해보자', availableCoupons);

        if (availableCoupons.length === 0) {
          alert('사용 가능한 쿠폰이 없습니다.');
          return;
        }

        // 드롭다운 메뉴에 보유중인 쿠폰 표시해줌
        const couponDropdown = document.querySelector('#coupon-dropdown');
        couponDropdown.innerHTML =
          '<option value="">쿠폰을 선택하세요</option>';
        availableCoupons.forEach((coupon) => {
          const couponOption = document.createElement('option');
          couponOption.value = coupon.id;
          couponOption.text = `${coupon.name} (${coupon.discount}% off)`;
          couponDropdown.add(couponOption);
        });

        // 선택한 쿠폰이 바뀌면
        couponDropdown.addEventListener('change', () => {
          const selectedCouponId = parseInt(couponDropdown.value);
          const selectedCoupon = availableCoupons.filter(
            (coupon) => parseInt(coupon.id) === selectedCouponId,
          );

          if (selectedCoupon.length > 0) {
            // 필터를 걸치면 배열 형태라서 첫번째 객체의 discount 값을 변수로 지정
            const discountPercentage = selectedCoupon[0].discount;
            // 최대 할인금액 가져오기
            const maxDiscount = selectedCoupon[0].maxDiscount;
            const discount = discountPercentage / 100;
            // 쿠폰 이름 표시용 변수
            const couponName = selectedCoupon[0].name;

            // 할인 두가자
            let discountedPrice = totalPrice - totalPrice * discount;

            // 할인된 금액이 최대 할인금액을 넘어섰다면, 값을 재설정
            if (totalPrice - discountedPrice > maxDiscount) {
              discountedPrice = totalPrice - maxDiscount;
            } // 위에서 계산한번 하고, if문에서 max할인값이랑 비교하고 다시 담거든요? 그거를 밑에서

            const applyCouponBtn = document.querySelector('#apply-coupon-btn');

            // 쿠폰 선택하고 버튼 누르면 정보갱신
            applyCouponBtn.addEventListener('click', () => {
              document.querySelector('#coupon').innerHTML = couponName;
              document.querySelector(
                '#discountPercentage',
              ).innerHTML = `${discountPercentage}%`;
              document.querySelector(
                '#maxDiscount',
              ).innerHTML = `${maxDiscount.toLocaleString('ko-KR')} 원`;
              document.querySelector(
                '#total-price',
              ).innerHTML = `${discountedPrice.toLocaleString('ko-KR')} 원`;
              // 다른 함수에서 사용하기 위해 밸류 숨김
              document.querySelector('#hidden').value = discountedPrice;
            });
          } else {
            // 여기 에러처리 어떻게 해야 하는지 진짜 모르겠음
            console.log('올바른 쿠폰을 선택해주십시오.');
          }
        });
      } catch (error) {
        console.error(error);
        alert('잘못된 요청입니다. 다시 시도해 주십시오');
      }
    }

    // 카드결제 버튼 세팅
    cardPaymentBtn.addEventListener('click', function () {
      paymentMethod = 'card';
      cardPaymentBtn.classList.add('active');
      depositBtn.classList.remove('active');
    });

    // 무통장 버튼 세팅
    depositBtn.addEventListener('click', function () {
      paymentMethod = 'deposit';
      depositBtn.classList.add('active');
      cardPaymentBtn.classList.remove('active');
      // 모달 가져오고
      const modal = document.getElementById('myModal');

      // 닫기 버튼
      const closeBtn = modal.querySelector('.close');

      // 완료 버튼
      const completeBtn = modal.querySelector('#complete-btn');

      // 버튼 클릭 시 오픈
      modal.style.display = 'block';

      // 닫기버튼 누르면 사라짐
      closeBtn.addEventListener('click', function () {
        modal.style.display = 'none';
      });

      // 완료 버튼을 누르면, 인풋 내용을 변수에 담고
      completeBtn.addEventListener('click', function () {
        const nameInput = modal.querySelector('#name-input');
        const name = nameInput.value;
        // 저장
        data.name = name;
        modal.style.display = 'none';
      });
    });

    // 결제하기 버튼 세팅
    payBtn.addEventListener('click', function () {
      if (!paymentMethod) {
        alert('원하시는 결제 방식을 먼저 선택해주세요');
        return;
      }

      payment(paymentMethod);
    });

    // 결제정보를 HTML에 뿌려주는 함수
    function getPaymentInfo() {
      // 문자열 3개마다 쉼표 넣어주고 변수에 담음
      const totalPriceWithCommas = totalPrice.toLocaleString('ko-KR');
      document.querySelector('#campName').innerHTML = campName;
      document.querySelector('#selectedDay').innerHTML = selectedDay;
      document.querySelector('#totalPeople').innerHTML = `${totalPeople} 명`;
      document.querySelector('#price').innerHTML = `${totalPriceWithCommas} 원`;
      document.querySelector('#coupon').innerHTML = '사용하지 않음';
      document.querySelector('#discountPercentage').innerHTML =
        '선택된 쿠폰 없음';
      document.querySelector('#maxDiscount').innerHTML = '선택된 쿠폰 없음';
      document.querySelector(
        '#total-price',
      ).innerHTML = `${totalPriceWithCommas} 원`;
    }

    // 결제 진행함수 ( 버튼이 눌려야 실행 )
    function payment(paymentMethod) {
      paymentMethod = paymentMethod === 'card' ? 0 : 1;
      // 버튼을 누른 이후에 작성된 비상연락처, 요청사항을 가져옴
      const emergencyContact =
        document.getElementById('emergencyContact').value;
      const requirements = document.getElementById('requirements').value;

      // 휴대폰번호 검증 정규식 (https://hanryangitstory.tistory.com/12)
      const regPhone = /^01([0|1|6|7|8|9])-?([0-9]{3,4})-?([0-9]{4})$/;

      if (emergencyContact && regPhone.test(emergencyContact) == false) {
        throw new Error(
          (status = 400),
          alert('비상 연락처에는 휴대폰 번호만 입력 가능합니다'),
        );
      }

      // 히든밸류 뽑아오기
      const discountedPrice = parseInt(document.getElementById('hidden').value);

      // 입력할 데이터를 미리 객체로 싼 다음
      let postData = {
        userId,
        campId,
        selectedDay,
        headcount: totalPeople,
        receipt: discountedPrice,
        isReview: false,
        type: paymentMethod,
        emergencyContact: emergencyContact,
        requirements: requirements,
      };

      // 결제타입(방식)이 1이라면(무통장) 아래와같이 기입받은 이름을 추가
      if (paymentMethod === 1) {
        const nameInput = document.getElementById('name-input');
        const name = nameInput.value;
        if (!name) {
        }
        postData = {
          ...postData,
          name: name,
        };
      }

      if (!discountedPrice) {
        postData.receipt = totalPrice;
      }

      try {
        axios
          .post('/api/orders', postData)
          .then((response) => {
            alert('예약 완료');
            window.location.href = '/';
          })
          .catch((error) => {
            alert('올바르지 못한 요청');
            window.location.href = '/';
          });
      } catch (error) {
        throw new Error();
      }
    }
  });
</script>
